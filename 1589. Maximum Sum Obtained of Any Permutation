
Brute Force - TLE

class Solution {
    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int[] count = new int[nums.length];
        
        for(int i=0;i<requests.length;i++){
            
            
            for(int j=requests[i][0];j<=requests[i][1];j++){
                
                
                count[j]++;
                
            }  
        }
        
         PriorityQueue<Integer> num = new PriorityQueue<>(Collections.reverseOrder());
        
        for(int i=0;i<nums.length;i++){
            
            num.add(nums[i]);
        }
           
        for(int i=0;i<count.length;i++){
            
            pq.add(count[i]);
        }
        
        long ans=0;
        while(!pq.isEmpty() && pq.peek()!=0){
            ans=ans + pq.poll()*num.poll();
        }
        
        
        
        
        
        
        
        
        
        
        return (int)(ans%(1000000007));
    }
}

Optimised - accepted 

class Solution {
    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        int[]exist=new int[nums.length];
        
        for(int[]req:requests){
            exist[req[0]]++;
            
            if(req[1] < nums.length-1)
                exist[req[1]+1]--;
        }
        for(int i=1;i<exist.length;i++)
            exist[i]+=exist[i-1];
        
        Arrays.sort(exist);
        Arrays.sort(nums);
        int mod=1000000007;
        long s=0;
        for(int i=0;i<nums.length;i++){
            long temp=(long) 1;
            s =(s + (((temp * exist[i]) % mod) * nums[i]) % mod) % mod;
        }
        return (int) s;
    }
}






