class Solution {
    public int minOperations(int[] nums1, int[] nums2) {
        int[] a= new int[7];
        int[] b=new int[7];
        int a1=0,b1=0;
        for(int i=0;i<nums1.length;i++)
        {
            a[nums1[i]]++;
            a1+=nums1[i];
        }
        
         for(int i=0;i<nums2.length;i++)
        {
            b[nums2[i]]++;
             b1+=nums2[i];
        }
        if((a1-b1)==0) return 0;
        
        
        if(a1>b1)
        {
            int y=a1-b1;
            int i=a.length-1;
            int j=1;
            int count=0;
           while(true)
           {
             if(i>1 && a[i]!=0)
             {int t= a[i];
               int p=t*(i-1);
              
               if(y>=p){ y=y-p; count+=t; if(y==0) return count;}
              else{
                   count+=y/(i-1) ;
                   if(y%(i-1)!=0) count+=1;
                  return count;
              }
              
              System.out.println(y);
              
          
             }
               if(j<6 && b[j]!=0 )
               {
               int l=b[j];
               int m=6*l-l*j;
               
               if(y>=m){count+=l; y=y-m;if(y==0) return count;}
                   else{
                       
                       count+=y/(6-j);
                       
                       if(y%(6-j)!=0) count+=1;
                       
                       
                       return count;
                       }
                  
             
               
               }
               i--;
               j++;
               
               if(j>=6 && i<=0) return -1;
               
               
           }
            
            
            
            
            
            
            
            
        }
        else
        {
            
            return minOperations(nums2, nums1);
            
        }
        
        
        
        
        
        
        
        
        
        
        
        
     // return -1;  
        
        
        
    }
}
