Brute Force Approach

class Solution {
    public long mostPoints(int[][] questions) {
        long[] ans= new long[questions.length];
        ans[0]=(long)(questions[0][0]);
        for(int i=1;i<questions.length;i++){
            
         long max=questions[i][0];
int j=i-1;
            while(j>=0){
               
                if(i-questions[j][1]>j) max=Math.max(max,questions[i][0]+ans[j]);
                else max=Math.max(max,ans[j]);
                
                j--;
                
            }
            
            ans[i]=max;
            
            }   
        return ans[ans.length-1];
        
    }
}



<b>Optimized Approach</b>

class Solution {
    public long mostPoints(int[][] questions) {
        int n = questions.length;
        long[] dp = new long[n];
        dp[n - 1] = questions[n - 1][0];
        
        for (int i = n - 2; i >= 0; --i) {
            dp[i] = questions[i][0];
            int skip = questions[i][1];
            if (i + skip + 1 < n) {
                dp[i] += dp[i + skip + 1];
            }
            
            // dp[i] = max(solve it, skip it)
            dp[i] = Math.max(dp[i], dp[i + 1]);
        }
        
        return dp[0];
    }
}


