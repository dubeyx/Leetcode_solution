Brute Force - TLE

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        
        Arrays.sort(envelopes,(a,b)->(a[0]==b[0]?b[1]-a[1]:a[0]-b[0]));
        int[] dp = new int[envelopes.length];
        int mx=1;
        for(int i=0;i<envelopes.length;i++){
            dp[i]=1;
            for(int u=0;u<i;u++){
                
                if(envelopes[u][1]<envelopes[i][1]){
                  dp[i]=  Math.max(dp[i],dp[u]+1);
                }
                
            }
            
           mx=Math.max(mx,dp[i]); 
            
        } 
        
      return mx;  
    }
}

Optimized - Accepted

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
Arrays.sort(envelopes, (a,b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);  
        List<Integer>list= new ArrayList<>();
      list.add(envelopes[0][1]);
        for(int i=1;i<envelopes.length;i++){
            
            int t= Collections.binarySearch(list,envelopes[i][1]);
            if(t<0) t=-t-1;
            if(t==list.size()) list.add(envelopes[i][1]);
            else list.set(t,envelopes[i][1]);
            
        }
   
      
        
        
        
        
        
        return list.size();
    }
}
