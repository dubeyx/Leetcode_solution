class Pair{
    TreeNode node;
    int[] arr;
    Pair(TreeNode node, int[] arr){
        this.node = node;
        this.arr = arr;
    }
}
class Solution {
    public List<List<String>> printTree(TreeNode root) {
        List<List<String>> ans = new ArrayList<>();
        
        if(root == null){
            return ans;
        }
        
        int rows = getHeight(root);
        int cols = (int)(Math.pow(2,rows))-1;
        
        for(int i=0 ; i<rows ; i++){
            List<String> row = new ArrayList<>();
            for(int j=0 ; j<cols ; j++){
                row.add("");
            }
            ans.add(row);
        }
        
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(root, new int[] { 0, cols - 1 }));
        int row = -1;
        while (!q.isEmpty()) {
            row++;
            int size = q.size();
            for (int i = 0; i < size; i++) {
                Pair p = q.poll();
                TreeNode cur = p.node;
                int[] indices = p.arr;
                
                
                int row_num = indices[0];
                int col_num = indices[1];
                int mid = row_num + (col_num - row_num) / 2;
                ans.get(row).set(mid, String.valueOf(cur.val));
                
                if(cur.left != null){
                    q.offer(new Pair(cur.left,new int[] { row_num, mid - 1 }));
                }
                if(cur.right != null){
                    q.offer(new Pair(cur.right, new int[] { mid + 1, col_num }));
                }
            }
        }
        
        return ans;
    }
    
    private int getHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = getHeight(root.left);
        int right = getHeight(root.right);
        return Math.max(left, right) + 1;
    }
}
