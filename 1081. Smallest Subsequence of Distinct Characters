class Solution {
    public String smallestSubsequence(String s) {
      
          int[] frequency = new int[26];

        for (int i = 0; i < s.length(); i++) {
            frequency[s.charAt(i) - 'a']++;
        }


   

        int[] seen = new int[26];

       
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < s.length(); i++) {
            Character currentCharacter = s.charAt(i);

            if (seen[currentCharacter - 'a'] == 1) {
                frequency[currentCharacter - 'a']--;
                continue;
            }

            while (!stack.isEmpty() && stack.peek() > currentCharacter && frequency[stack.peek() - 'a'] > 0) {
                seen[stack.peek() - 'a'] = 0;
                stack.pop();
            }

            stack.push(currentCharacter);
            frequency[currentCharacter - 'a']--;
            seen[currentCharacter - 'a'] = 1;
        }

        StringBuilder answer = new StringBuilder();

        while (!stack.isEmpty()){
            answer.append(stack.pop());
        }
        return answer.reverse().toString();
        
        
    }
}
