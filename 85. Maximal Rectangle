class Solution {
    public int maximalRectangle(char[][] matrix) {
        int max=-1;
        int m=matrix.length;
        int n=matrix[0].length;
         int[] arr = new int[n];
     
      for(int i=0;i<m;i++){
        for(int j = 0;j<n;j++){
    
            if(matrix[i][j]=='0')arr[j] = 0;
            else{
              arr[j] += 1;
            }
            
          }
        max = Math.max(max, largestRectangleArea(arr));
      }
                
                
             ;  
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
        return max;
        
    }
  public   int largestRectangleArea(int[] heights) {
        if(heights.length==1) return heights[0];
        Stack<Integer> st = new Stack();
        st.add(0);
        int i=0;
        int area=0;
        while(i<heights.length)
        {
            
         
                while(!st.isEmpty() && heights[i]<heights[st.peek()])
                {
                    int t=st.peek();
                    int h= heights[t];
                    st.pop();
                    if(st.isEmpty())
                    {
                        area=Math.max(area,h*i);
                    }
                    else
                    {
                        int len=i-st.peek()-1;
                        area=Math.max(area,h*len);
                    }
                    
                    
                }
          
            st.add(i);
            i++;
            
        }
        
        while(!st.isEmpty())
                {
                    int t=st.peek();
                    int h= heights[t];
                    st.pop();
                    if(st.isEmpty())
                    {
                        area=Math.max(area,h*i);
                    }
                    else
                    {
                        int len=i-st.peek()-1;
                        area=Math.max(area,h*len);
                    }
                    
                    
                }
        
        
        
        
        
        return area;
        
    }
    
    
}
