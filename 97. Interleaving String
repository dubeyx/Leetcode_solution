Brute Force - TLE

class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        
        if(s2.length()+s1.length()!=s3.length()) return false;
        
        int i=0;
        int j=0;
        int k=0;
        
        
        for(k=0;k<s3.length();k++)
        {
            if(i<s1.length() && j<s2.length() && s1.charAt(i)==s3.charAt(k) && s2.charAt(j)==s3.charAt(k))
            {
             
            return isInterleave(s1.substring(i+1), s2.substring(j), s3.substring(k+1)) || isInterleave(s1.substring(i), s2.substring(j+1), s3.substring(k+1));
                
                
            }
           else if(i<s1.length() && s1.charAt(i)==s3.charAt(k))
            {
                i++;
            }else  if(j<s2.length() && s2.charAt(j)==s3.charAt(k))
            {
                j++;
            }
            else
            {
                return false;
            }
            
            
            
        }
        
        
        
        
      return true;  
    }
}


Optimised - Accepted


public class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
        if (s3.length() != s1.length() + s2.length()) {
            return false;
        }
        boolean dp[] = new boolean[s2.length() + 1];
        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0 && j == 0) {
                    dp[j] = true;
                } else if (i == 0) {
                    dp[j] = dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1);
                } else if (j == 0) {
                    dp[j] = dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1);
                } else {
                    dp[j] = (dp[j] && s1.charAt(i - 1) == s3.charAt(i + j - 1)) || (dp[j - 1] && s2.charAt(j - 1) == s3.charAt(i + j - 1));
                }
            }
        }
        return dp[s2.length()];
    }
}








